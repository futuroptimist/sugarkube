#!/usr/bin/env bash
# Export a sanitized kubeconfig to the boot partition for recovery without SSH.
set -euo pipefail

log() {
  printf '[sugarkube-export-kubeconfig] %s\n' "$*" >&2
}

SRC_PATH="${SUGARKUBE_KUBECONFIG_SOURCE:-/etc/rancher/k3s/k3s.yaml}"
DEST_PATH="${SUGARKUBE_KUBECONFIG_DEST:-/boot/sugarkube-kubeconfig}"
TIMEOUT_SECS="${SUGARKUBE_KUBECONFIG_TIMEOUT:-300}"
SLEEP_SECS="${SUGARKUBE_KUBECONFIG_INTERVAL:-5}"
SERVER_URL="${SUGARKUBE_KUBECONFIG_SERVER:-}"
HEADER_TEXT="${SUGARKUBE_KUBECONFIG_HEADER:-}"

if [[ -z "$SERVER_URL" ]]; then
  host="$(hostname -f 2>/dev/null || hostname)"
  if [[ "$host" != *.* ]]; then
    host="${host}.local"
  fi
  SERVER_URL="https://${host}:6443"
fi

if [[ -z "$HEADER_TEXT" ]]; then
  timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  HEADER_TEXT=$'# sugarkube kubeconfig exported for recovery without SSH.\n# Generated by sugarkube-export-kubeconfig.sh on '
  HEADER_TEXT+="${timestamp} (UTC)"
fi

elapsed=0
while [[ ! -s "$SRC_PATH" ]]; do
  if (( elapsed >= TIMEOUT_SECS )); then
    log "Timed out waiting for kubeconfig at $SRC_PATH"
    exit 1
  fi
  sleep "$SLEEP_SECS"
  elapsed=$((elapsed + SLEEP_SECS))
  log "Waiting for kubeconfig at $SRC_PATH (elapsed: ${elapsed}s)"
done

TMP_FILE="$(mktemp)"
cleanup() {
  rm -f "$TMP_FILE" "${TMP_FILE}.header"
}
trap cleanup EXIT

cp "$SRC_PATH" "$TMP_FILE"
chmod 600 "$TMP_FILE"

python3 - "$TMP_FILE" "$SERVER_URL" <<'PY'
import pathlib
import re
import sys

path = pathlib.Path(sys.argv[1])
server = sys.argv[2]
text = path.read_text()
pattern = re.compile(r'(^\s*server:\s*)\S+', re.MULTILINE)
text, count = pattern.subn(r'\1' + server, text, count=1)
if count == 0:
    print(f"No server entry found in {path}", file=sys.stderr)
path.write_text(text)
PY

printf '%s\n\n' "$HEADER_TEXT" > "${TMP_FILE}.header"
cat "$TMP_FILE" >> "${TMP_FILE}.header"

install -Dm600 "${TMP_FILE}.header" "$DEST_PATH"
log "Wrote kubeconfig to $DEST_PATH"

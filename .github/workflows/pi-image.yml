name: pi-image

on:
  # Keep manual builds for the heavy job
  workflow_dispatch:
    inputs:
      clone_sugarkube:
        description: "Clone sugarkube repo into image"
        type: boolean
        default: false
      clone_token_place:
        description: "Clone token.place repo into image"
        type: boolean
        default: false
      clone_dspace:
        description: "Clone democratizedspace/dspace v3 repo into image"
        type: boolean
        default: false
  # Also run the lightweight unit tests automatically when relevant bits change
  pull_request:
    paths:
      - 'scripts/collect_pi_image.sh'
      - 'tests/**'
      - '.github/workflows/pi-image.yml'

env:
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE24: true

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1
      - name: Install collector dependencies
        run: |
          sudo apt-get -o Acquire::Retries=5 \
            -o Acquire::http::Timeout=30 \
            -o Acquire::https::Timeout=30 \
            update
          sudo apt-get -o Acquire::Retries=5 \
            -o Acquire::http::Timeout=30 \
            -o Acquire::https::Timeout=30 \
            install -y --no-install-recommends libarchive-tools xz-utils
      - name: Run artifact detection unit tests
        run: bash tests/artifact_detection_test.sh

  build:
    # Only run the expensive image build when manually dispatched
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      ARM64: 1
      DEBIAN_FRONTEND: noninteractive
      BUILD_TIMEOUT: 7200
      CLONE_SUGARKUBE: ${{ github.event.inputs.clone_sugarkube }}
      CLONE_TOKEN_PLACE: ${{ github.event.inputs.clone_token_place }}
      CLONE_DSPACE: ${{ github.event.inputs.clone_dspace }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Free up disk space
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /opt/hostedtoolcache /usr/local/lib/node_modules \
            /usr/local/share/boost
          docker system prune -af || true
          df -h

      - name: Install pi-gen dependencies
        run: |
          sudo apt-get -o Acquire::Retries=5 \
            -o Acquire::http::Timeout=30 \
            -o Acquire::https::Timeout=30 \
            update
          sudo apt-get -o Acquire::Retries=5 \
            -o Acquire::http::Timeout=30 \
            -o Acquire::https::Timeout=30 \
            install -y --no-install-recommends \
            quilt qemu-user-static debootstrap libarchive-tools arch-test xz-utils

      - name: Clean up apt cache and temp files
        run: |
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/* /tmp/*

      - name: Compute pi-gen cache key
        id: pigen-key
        run: |
          branch=bookworm
          ref=$(git ls-remote https://github.com/RPi-Distro/pi-gen.git "refs/heads/${branch}" | cut -f1)
          echo "key=pigen-${RUNNER_OS}-${branch}-${ref}-$(date +'%Y-%m')" >> "$GITHUB_OUTPUT"

      - name: Restore pi-gen Docker image
        id: cache-pigen
        uses: actions/cache@v4
        with:
          path: ~/cache/pi-gen.tar
          key: ${{ steps.pigen-key.outputs.key }}

      - name: Load cached pi-gen image
        if: steps.cache-pigen.outputs.cache-hit == 'true'
        run: docker load -i ~/cache/pi-gen.tar

      - name: Build pi-gen Docker image
        if: steps.cache-pigen.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 --branch bookworm https://github.com/RPi-Distro/pi-gen.git ~/pi-gen
          cd ~/pi-gen
          docker build -t pi-gen:latest .

      - name: Verify pi-gen Docker image
        run: |
          if ! docker image inspect pi-gen:latest > /dev/null 2>&1; then
            echo "pi-gen:latest Docker image not found!"
            exit 1
          fi

      - name: Build Raspberry Pi OS image
        timeout-minutes: 120
        run: |
          sudo env \
            BUILD_TIMEOUT="${BUILD_TIMEOUT}" \
            CLONE_SUGARKUBE="${CLONE_SUGARKUBE}" \
            CLONE_TOKEN_PLACE="${CLONE_TOKEN_PLACE}" \
            CLONE_DSPACE="${CLONE_DSPACE}" \
            ./scripts/build_pi_image.sh

      - name: Verify pi-gen Docker image
        run: |
          if ! docker image inspect pi-gen:latest > /dev/null 2>&1; then
            echo "pi-gen:latest Docker image not found!"
            exit 1
          fi

      - name: List deploy directory
        if: always()
        run: |
          echo "--- list of deploy ---"
          if [ -d deploy ]; then
            find deploy -maxdepth 3 -type f -printf "%p\t%k KB\n" | sort
          else
            echo "deploy directory not found"
          fi

      - name: Collect image artifact
        run: |
          bash scripts/collect_pi_image.sh . ./sugarkube.img.xz

      - name: Save pi-gen Docker image
        if: steps.cache-pigen.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/cache
          docker image save pi-gen:latest -o ~/cache/pi-gen.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sugarkube-img
          path: |
            ./sugarkube.img.xz
            ./sugarkube.img.xz.sha256

      - name: Collect support bundle
        if: always()
        env:
          SUPPORT_BUNDLE_HOST: ${{ secrets.SUPPORT_BUNDLE_HOST }}
          SUPPORT_BUNDLE_USER: ${{ secrets.SUPPORT_BUNDLE_USER }}
          SUPPORT_BUNDLE_KEY: ${{ secrets.SUPPORT_BUNDLE_KEY }}
        run: |
          set -euo pipefail
          args=("--output" "support-bundle.tar.gz")
          if [[ -n "${SUPPORT_BUNDLE_HOST:-}" ]]; then
            args+=("--host" "${SUPPORT_BUNDLE_HOST}")
          fi
          if [[ -n "${SUPPORT_BUNDLE_USER:-}" ]]; then
            args+=("--user" "${SUPPORT_BUNDLE_USER}")
          fi
          key_path=""
          if [[ -n "${SUPPORT_BUNDLE_KEY:-}" ]]; then
            key_path="$(mktemp)"
            printf '%s\n' "${SUPPORT_BUNDLE_KEY}" >"${key_path}"
            chmod 600 "${key_path}"
            args+=("--identity" "${key_path}")
          fi
          if [[ -n "${SUPPORT_BUNDLE_HOST:-}" ]]; then
            args+=("--include-first-boot-report")
          fi
          python3 scripts/collect_support_bundle.py "${args[@]}"
          if [[ -n "${key_path}" ]]; then
            shred -u "${key_path}"
          fi

      - name: Upload support bundle artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: support-bundle
          path: support-bundle.tar.gz

name: pi-image

on:
  # Keep manual builds for the heavy job
  workflow_dispatch:
    inputs:
      clone_sugarkube:
        description: "Clone sugarkube repo into image"
        type: boolean
        default: false
      clone_token_place:
        description: "Clone token.place repo into image"
        type: boolean
        default: false
      clone_dspace:
        description: "Clone democratizedspace/dspace v3 repo into image"
        type: boolean
        default: false
  # Also run the lightweight unit tests automatically when relevant bits change
  pull_request:
    paths:
      - 'scripts/collect_pi_image.sh'
      - 'scripts/build_pi_image.sh'
      - 'scripts/build_pi_image.ps1'
      - 'scripts/fix_pi_image_permissions.sh'
      - 'scripts/create_build_metadata.py'
      - 'scripts/fix_pi_image_permissions.sh'
      - 'tests/create_build_metadata_e2e.sh'
      - 'tests/**'
      - '.github/workflows/pi-image.yml'

env:
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE24: true

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1
      - name: Install collector dependencies
        run: |
          sudo apt-get -o Acquire::Retries=5 \
            -o Acquire::http::Timeout=30 \
            -o Acquire::https::Timeout=30 \
            update
          sudo apt-get -o Acquire::Retries=5 \
            -o Acquire::http::Timeout=30 \
            -o Acquire::https::Timeout=30 \
            install -y --no-install-recommends libarchive-tools xz-utils
      - name: Run artifact detection unit tests
        run: bash tests/artifact_detection_test.sh

      - name: Run build metadata smoke test
        run: bash tests/create_build_metadata_e2e.sh

      - name: Run pi-gen cache key e2e test
        run: bash tests/compute_pi_gen_cache_key_e2e.sh

      - name: Run fix permissions e2e test
        run: bash tests/fix_pi_image_permissions_e2e.sh

  build:
    # Only run the expensive image build when manually dispatched
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      ARM64: 1
      DEBIAN_FRONTEND: noninteractive
      BUILD_TIMEOUT: 7200
      CLONE_SUGARKUBE: ${{ github.event.inputs.clone_sugarkube }}
      CLONE_TOKEN_PLACE: ${{ github.event.inputs.clone_token_place }}
      CLONE_DSPACE: ${{ github.event.inputs.clone_dspace }}
    steps:
      - uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1

      - name: Free up disk space
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/lib/node_modules /usr/local/share/boost
          docker system prune -af || true
          df -h

      - name: Verify Node runtime availability
        run: |
          if ! command -v node >/dev/null 2>&1; then
            echo "Node.js runtime missing after cleanup" >&2
            exit 1
          fi
          node --version

      - name: Install pi-gen dependencies
        run: |
          sudo apt-get -o Acquire::Retries=5 \
            -o Acquire::http::Timeout=30 \
            -o Acquire::https::Timeout=30 \
            update
          sudo apt-get -o Acquire::Retries=5 \
            -o Acquire::http::Timeout=30 \
            -o Acquire::https::Timeout=30 \
            install -y --no-install-recommends \
            quilt qemu-user-static debootstrap libarchive-tools arch-test xz-utils

      - name: Clean up apt cache and temp files
        run: |
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/* /tmp/*

      - name: Compute pi-gen cache key
        id: pigen-key
        env:
          PI_GEN_BRANCH: bookworm
          PI_GEN_REMOTE: https://github.com/RPi-Distro/pi-gen.git
        run: |
          key=$(bash scripts/compute_pi_gen_cache_key.sh "${PI_GEN_BRANCH}" "${PI_GEN_REMOTE}")
          echo "key=${key}" >> "$GITHUB_OUTPUT"

      - name: Restore pi-gen Docker image
        id: cache-pigen
        uses: actions/cache@v4.3.0
        with:
          path: ~/cache/pi-gen.tar
          key: ${{ steps.pigen-key.outputs.key }}

      - name: Load cached pi-gen image
        if: steps.cache-pigen.outputs.cache-hit == 'true'
        run: docker load -i ~/cache/pi-gen.tar

      - name: Build pi-gen Docker image
        if: steps.cache-pigen.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 --branch bookworm https://github.com/RPi-Distro/pi-gen.git ~/pi-gen
          cd ~/pi-gen
          docker build -t pi-gen:latest .

      - name: Verify pi-gen Docker image
        run: |
          if ! docker image inspect pi-gen:latest > /dev/null 2>&1; then
            echo "pi-gen:latest Docker image not found!"
            exit 1
          fi

      - name: Build Raspberry Pi OS image
        timeout-minutes: 120
        run: |
          sudo env \
            BUILD_TIMEOUT="${BUILD_TIMEOUT}" \
            CLONE_SUGARKUBE="${CLONE_SUGARKUBE}" \
            CLONE_TOKEN_PLACE="${CLONE_TOKEN_PLACE}" \
            CLONE_DSPACE="${CLONE_DSPACE}" \
            ./scripts/build_pi_image.sh

      - name: pi-image-verify-just
        if: always()
        run: |
          mapfile -t logs < <(find deploy -maxdepth 6 -name '*.build.log' -print | sort)
          if [ "${#logs[@]}" -eq 0 ]; then
            echo "pi-gen build log missing" >&2
            exit 1
          fi
          echo '--- just verification ---'
          found=0
          for log in "${logs[@]}"; do
            echo "Checking ${log}"
            if grep -FH 'just command verified' "${log}"; then
              found=1
              grep -FH '[sugarkube] just version' "${log}" || true
            fi
          done
          if [ "${found}" -eq 0 ]; then
            echo 'just verification line missing in logs:' >&2
            printf '  %s\n' "${logs[@]}" >&2
            exit 1
          fi

      - name: Verify pi-gen Docker image
        run: |
          if ! docker image inspect pi-gen:latest > /dev/null 2>&1; then
            echo "pi-gen:latest Docker image not found!"
            exit 1
          fi

      - name: List deploy directory
        if: always()
        run: |
          echo "--- list of deploy ---"
          if [ -d deploy ]; then
            find deploy -maxdepth 3 -type f -printf "%p\t%k KB\n" | sort
          else
            echo "deploy directory not found"
          fi

      - name: Fix permissions on pi-image artifacts
        run: |
          sudo TARGET_UID="$(id -u)" TARGET_GID="$(id -g)" \
            bash scripts/fix_pi_image_permissions.sh

      - name: Collect image artifact
        run: |
          bash scripts/collect_pi_image.sh deploy ./sugarkube.img.xz

      - name: Save pi-gen Docker image
        if: steps.cache-pigen.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/cache
          docker image save pi-gen:latest -o ~/cache/pi-gen.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: sugarkube-img
          path: |
            ./sugarkube.img.xz
            ./sugarkube.img.xz.sha256
